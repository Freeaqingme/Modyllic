#!/usr/bin/env php
<?php
print_r($argv);
if ( $argc < 3 or $argc > 5 ) {
    fputs(STDERR, "Form: {$argv[0]} input.xml output.xml [version [state]]\n");
    fputs(STDERR, "Ex: {$argv[0]} package.xml new.xml 1.0.0 beta\n");
    exit(1);
}
@list($program,$input,$output,$version,$state) = $argv;
$prev_versions = array();
foreach (explode("\n",trim(`git for-each-ref --sort='-refname' --format='%(refname:short) %(authordate:short)' refs/tags/v*.*.*`)) as $tag) {
    list($tag_name,$tag_date) = explode(" ",$tag);
    $tag_version = substr($tag_name,1);
    list($tag_major, $tag_minor, $tag_rel) = explode(".",$tag_version);
    $prev_versions[] = array(
        "name" => $tag_name,
        "date" => $tag_date,
        "version" => $tag_version,
        "major" => $tag_major,
        "minor" => $tag_minor,
        "rel"   => $tag_rel,
        );
}
print_r($prev_versions);

// PEAR can't live with strict, so make sure it's off.
ini_set("error_reporting",E_ALL);
require_once "PEAR/PackageFileManager2.php";
$pfm = new PEAR_PackageFileManager2();
$res = @$pfm->importOptions( $input );
if ( $res instanceof PEAR_Error ) {
    fputs(STDERR, $res->message."\n");
    exit(1);
}

if ( ! isset($version) ) {
    $prev = $prev_versions[0];
    $rel = $prev['rel'] + 1;
    $version = "{$prev['major']}.{$prev['minor']}.{$rel}";
    $state = "alpha";
    $res->setNotes( "NOTE: This version was built from source:\n".
                    trim(`git log --format="* %s (%aN)" {$prev['name']}.. --ancestry-path  --no-merges`) );
}
else {
    $res->setNotes( file_get_contents('CHANGELOG') );
}


$options = $res->getOptions();
$options['clearchangelog'] = false;
$options['filelistgenerator'] = 'git';
$options['packagedirectory'] = '.';
$options['packagefile'] = $output;
$options['roles']['md'] = "doc";
$options['dir_roles']['testlib'] = "test";
$options['baseinstalldir'] = "/";
$options['ignore'][] = "Makefile";
$options['ignore'][] = "release-version";
$options['simpleoutput'] = true;
$res->setOptions($options);
$res->setAPIVersion( $version );
$res->setReleaseVersion( $version );
$res->setAPIStability( $state );
$res->setReleaseStability( $state );

foreach ($prev_versions as $index=>$prev) {
    $changes = trim(`git show {$prev['name']}:CHANGELOG 2> /dev/null`);
    if ( $changes == "" ) {
        $changes = "No changelog for this version.";
    }
    $stability = $prev['major'] > 0 ? "stable" : "beta";
    $res->setChangeLogEntry( $prev['version'], array(
        "version" => array(
            "release" => $prev['version'],
            "api"     => $prev['version'],
        ),
        "stability" => array(
            "release" => $stability,
            "api"     => $stability,
        ),
        "date" => $prev['date'],
        "license" => array(
            "attribs" => array(
                "uri" => "http://www.opensource.org/licenses/bsd-license.php",
            ),
            "_content" => "BSD Style",
        ),
        "notes" => $changes,
        ));
}
/*
$res->setChangeLogEntry( $version, array(
    "version" => array(
        "release" => $version,
        "api"     => $version,
    ),
    "stability" => array(
        "release" => $state,
        "api"     => $state,
    ),
    "date" => date("Y-m-d"),
    "license" => array(
        "attribs" => array(
            "uri" => "http://www.opensource.org/licenses/bsd-license.php",
        ),
        "_content" => "BSD Style",
    ),
    "notes" => file_get_contents("CHANGELOG"),
    ));
*/
if ( isset($version) ) { $res->setReleaseVersion($version); }
if ( isset($state) ) { $res->setReleaseStability($state); }
$res->addReplacement( "Modyllic/CommandLine.php", "package-info", "@VERSION@", "version" );
$res->addReplacement( "Modyllic/CommandLine.php", "package-info", "@STATE@", "state" );
$res->generateContents();
foreach ( $res->getFilelist() as $name=>$info ) {
    if ( preg_match( '{^(?:docs/|scripts/)(.*)}', $name, $match ) ) {
        $res->addInstallAs( $name, $match[1] );
    }
}
print "Writing $output\n";
$error = $res->writePackageFile();
if ( $error instanceof PEAR_Error ) {
    fputs(STDERR, $error->message."\n");
    exit(1);
}
